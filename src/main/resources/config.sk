
#
#
#     __________________________________________________________
#    / /                                                   / /\ \
#    \_\___________________________________________________\_\/ /
#        / /    _____    __            __                    / /
#       / /    / ____\  / /           /_/          /\       / /
#      / /    / /__    / /___  ___   __  ______ __/ /_     / /
#     / /     \___ \  /   __/ / __\ / / / __  //_  __/    / /
#    / /     ____/ / / /\ \  / /   / / / /_/ /  / /      / /
#   / /     \_____/ /_/ /_/ /_/   /_/ / ____/  /_/      / /__
#  / /    ========================== / / ==========    / / \ \
# | |                               /_/               | |   | |
#  \_\_________________________________________________\_\_/_/
#
# == Introduction ==
# This file contains Skript's general options. To write scripts, create a new .sk file in the scripts folder or edit any existing one.
#
#
# Script files prefixed with a hyphen (-) will not be loaded, e.g. renaming 'plant with hoe.sk' to '-plant with hoe.sk' will disable the whole file.
# This can e.g. be used to temporarily disable scripts and is also used for Skript's example scripts.
# You can also use the command '/skript enable/disable <script>' to enable/disable a script which will automatically rename it.
#
#
# === !!! PLEASE NOTE !!! ===
# This file, all scripts and other files ending in .sk are NOT .yml/YAML files, but very similar!
# Please remember the following when editing files:
# - To indent sections you can use spaces like in YAML, but tabs are also allowed. Just remember to stick to the one or the other for a section/trigger.
# - '#' starts a comment like in YAML. If you don't want it to start a comment simply double it: '##' (You also have to double these in "quoted text")
# - If you use special characters (§, äöü, éèàôç, ñ, etc.) you have to encode the file in UTF-8.
#
#



# ==== General Options ====


language: english
# Which language to use. Currently english and german are included in the download, but custom languages can be created as well.
# Please note that not everything can be translated yet, i.e. parts of Skript will still be english if you use another language.
# If you want to translate Skript to your language please read the readme.txt located in the /lang/ folder in the jar
# (open the jar as zip or rename it to Skript.zip to access it)


check for new version: true
# Whatever Skript should check for a new version of Skript is available when the server starts.
# If this set to false, the update checking is disabled and not possible at all. You can however check manually :P
# Setting to false is only recommended if you stuck to some old version of Skript for reasons, or the updater is broken.

update check interval: 10 minutes
# If 'check for new version' is true, this sets how often to check for a new update.
# A first check will always be made when the server starts, after that checks will be made in intervals set by this option.
# Set this to 0 seconds for disabling repeated checks, in which case only one check will be made when the server starts.

automatically download new version: true
# Whatever Skript should automatically download & install the newest version of Skript if one is available.
# If you disable this you can still use '/skript update download' to make Skript download the newest version.
# If you're concerned about changes use '/skript update changes' for a full list of changes since the last update.

check for new addon versions: true
# Whatever Skript should check for new versions of Skript Add-Ons are available when the server starts.
# If this set to false, the add-on update checking is disabled and not possible at all. You can however check manually :P
# Setting to false is only recommended if you stuck to some old version of Skript Add-Ons for reasons, or the updater is broken.

addon update check interval: 30 minutes
# If 'check for new addon versions' is true, this sets how often to check for new add-on versions.
# A first check will always be made when the server starts, after that checks will be made in intervals set by this option.
# Set this to 0 seconds for disabling repeated checks, in which case only one check will be made when the server starts.

automatically download new addon versions: true
# Whatever Skript should automatically download & install the newest version of Skript Add-Ons if one is available.
# If you disable this you can still use '/skript addon <name> download' to make Skript download the newest version.
# If you're concerned about changes use '/skript addon <name> changes' for a full list of changes since the last update.


enable effect commands: true
effect command token: !
# If 'enable effect commands' is set to true, chat messages starting with the 'effect command token' will be interpreted as effects and executed.
# The token can be longer than a single character, but it should not start with '/' as that starts a command.
# A player needs the permission "skript.effectcommands" to use such commands,
# which does not default to OPs since these commands can do severe damage to the world or crash the server (see below).
# Some example commands which can be used if this setting is enabled:
#	!heal player - heals the player (doesn't do anything if used from the console)
#	!repair tool - repairs the currently held item
#	!broadcast "<red>Please read the rules!" - if you want to get rid of the quotes you have to define a custom command
#	!set time to 6:00 - sets the time in the current world
# The command can also be abused, so only give the permission to trusted players, like owners & co-owners:
#	!spawn 20 ender dragons - will destroy a large part of the world in a short time if no protection is present
#	!set player's balance to 999999999 - when a compatible economy plugin is installed, this will give the command sender as much money as desired
#	!create explosion of force 10000 - likely crashes the server or at least hangs it up for a long time
#	!ban all players - as the effect implies

allow ops to use effect commands: true
# Whether server operators which do not have the permission "skript.effectcommands" should have access to effect commands.
# This setting is mainly useful for servers that do not run any permissions plugin.

allow ops to bypass permission checks: true
# If true, the "has permission" condition will always return true for operators, even they do not have
# explicitly the requested permission. We only recommend changing this option if you have many operators.


player variable fix: true
#Whether to enable the player variable fix if a player has rejoined and was receding inside a variable.
#Player objects inside a variable(list or normal) are not updated to the new player object
#A server creates whenever a player rejoins. 
#Basicly the variable holds the old player object when a player has rejoined thus rendering the variable kinda broken.
#This fix should work around that and whenever a invalid(old) player object is attempted to be get through a variable
#It will check if the player is online and then get the valid(new) player object and update the variable object to that one.


use player UUIDs in variable names: false
# Whether to use a player's UUID instead of their name in variables, e.g. {home.%player%} will look like
# {home.e5240337-a4a2-39dd-8ed9-e5ce729a8522} instead of {home.njol}.
# Please note that if this setting is changed old variables WILL NOT be renamed automatically.
# If you are using Skript first time, you should make this true. Only one reason for making default value "false" is the compatibility.
# Also, make this true if your server have "online-mode=true" in server.properties


date format: default
# The date format to be used when dates should be displayed.
# This can be 'default' to use Java's default date format for the system's language.
# The format is that of Java's SimpleDateFormat as defined here: http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html
# some examples:
#  d/M/yyyy h:mm a => 15/7/2012 8:53 PM
#  dd.MM.yyyy HH:mm => 16.03.2013 09:33


verbosity: normal
# Determines how much info is logged.
# Allowed values: low, normal, high, very high, debug
# The highest you should go is very high, which prints quite a lot of useful information,
# including how much time each trigger takes to execute.
# Only use debug if you're programming an add-on for Skript, but even then you might usually not need it.
# Note: Debug verbosity has also some side effects and bugs, use it only for testing purposes!

plugin priority: default
# Allowed values: lowest, low, normal, high, highest, monitor
# Change this if you encounter problems with other plugins, e.g.:
# - cancelled events: The event is cancelled by another plugin, but Skript handles the event nonetheless => increase priority
#                    (e.g. WorldGuard cancels events if a player doesn't have permission for the given region,
#                     and you made some 'place' triggers which should not bypass WorldGuard's protection)
# - effects '(un)cancel event': Another plugin should/should not process the event, but does/does not => decrease priority
# - effect 'drop': Another plugin doesn't process added drops => decrease priority
# - effects 'remove ... from drops'/'clear drops': Drops added by other plugins are not removed => increase priority
#                                                  Skript removes drops it shouldn't => decrease priority or specify which item types to remove

# Default value is generally normal or monitor; we don't hardcode it in the default config, because if we do and change the default value in the future;
# when updating old configs, the plugin does not know whatever it's the default value or the explicit choice of the server admins. So we use this system.

throw on command only for plugin commands: true
# When this false, all commands, either skript command or a plugin command, will throw the on command event.
# Until Skript 2.2.13 this not possible, skript commands are not triggering on command events.
# The default value is true because of compatibility reasons and it is fine in most situtations.
# However if you want this behaviour instead of the old one, change this to false.

command priority: default
# Allowed values: lowest, low, normal, high, highest, monitor
# Do not set this to a higher value than 'plugin priority' to avoid issues and conflicts.
# The default value will always be a lower value than plugin priority, e.g if plugin priority
# is normal, then the command priority will be 'low' if set to default.

namespaced commands: true
# If true, script commands can also be executed with /skript:<command name>
# Change to false for removing the namespaced aliases and the skript prefix.
# Be aware that non namespaced commands are old behaviour and legacy code, meaning they can cause issues.

log player commands: true
# Whether Skript should log the usage of custom commands.
# They will be logged as [INFO] in this format: '<player>: /<command> <arguments>'


number accuracy: 2
# How many digits should be displayed after the dot at maximum when displaying numbers.
# Zeroes will never be displayed at all, so this setting only applies to numbers that actually have a decimal part with one or more non-zero digits.
# Money bypasses this setting and is displayed as configured in your economy plugin if you have one.

maximum target block distance: 100
# How far to search for a player's targeted block in blocks/meters.
# Lower values improve performance, but might reduce the usability of your scripts.
# This value is limited by the server (e.g. by 'view-distance' in the server.properties), but is guaranteed to work up to 100 meters.


allow scripts from subfolders: true
# If true, skript will also load scripts from any subfolder below scripts directory.
# Changing this to false may improve performance if you have many folders / files that are not scripts.


case sensitive: false
# Whether Skript's functions should be case sensitive or not.
# This e.g. applies to the effect 'replace' and the conditions 'contains' and 'is/is not'.
# Variable names are case-insensitive irrespective of this setting.

optimize and or lists: false
# When this is true, Skript will try to optimize long and or lists.
# This optimization is not guaranteed to give performance boost, and may broke your code.
# Use with caution and your own risk. As stated, this may break your code.


allow function calls before definitions: true
# Whether scripts should be allowed to call functions that are not yet loaded.
# If enabled, functions existence are checked after loading ALL scripts.


disable documentation generation: false
# Change to true for disabling documentation generation at startup.
# I don't recommend you to touch this settings but you're free to change.


disable variable will not be saved warnings: false
# Disables the "... i.e contents cannot be saved ..." warning when reloading and something in your scripts sets a variable(non local) to a value that is not serializable.
# Only recommended to disable if it is spamming, but rather than that, you should fix the issue instead of suppressing.

disable expression is already a text warnings: false
# Disables the "... is already a text, so you should not put it in one" warnings.
# You should remove redundant %% used to make string conversions to fix these warnings.

disable variable missing and/or warnings: false
# Disables the "List is missing 'and' or 'or', defaulting to 'and'" warnings.
# You should add 'and' (or 'or') for clarifying and not use this option in general.

disable empty configuration section warnings: false
# Disables the "Empty configuration section! You might want to ..." warnings.
# You should make this true only if you need it, or you hate the warnings.
# Warnings are not errors and allows you to enchance your script, so not disable unless you want.

disable empty script warnings: false
# Disables the "script.sk is empty" warnings. This not a recommended option.
# You should not use empty scripts as they don't make any sense.
# You can instead delete empty scripts or write some code to them.

disable using id instead of an alias warnings: false
# Disables the "... using an ID instead of an alias is discouraged ..." warnings.
# You should only make this true if a certain alias don't exist in Skript.
# Using an alias instead of an ID is a more cleaner, readable, idiomatic and better way.

disable start stop event warnings: false
# Disables the "Server start/stop events are actually called when Skript is started or stopped." warnings.
# While generally on load and on disable is recommended, you can also use on server start or stop events as you wish.

disable too long delay warnings: false
# Disables the "Delays greater than one day are not persistent ..." warnings.
# If you are making a thing like waiting 31 days then removing vip status from player, switch to a cooldown / date based
# system or just use existing plugins, i don't know too much but plugins like vipzero exists for a very long time.

disable delays in functions causes function to return instantly warnings: false
# Disables the "Delays in functions causes function to return instantly, this may cause bugs ..." warnings.
# You should really not use wait statements in functions as they are buggy.

disable variable conflict warnings: false
# Disables warnings of potential variable name conflicts if set to true.
# I recommend to not touch this option, but if you do so you should at least set it back to false
# whenever you create new scripts with new variables.

disable variable name starting with expression warnings: false
# Disables the "Starting a variable's name with an expression is discouraged" warning.
# I recommend to not touch this option, but if you do so you should at least set it back to false
# whenever you create new scripts with new variables.

disable use native effect instead of command warnings: false
# Disables the suggestion warnings when you use 'execute console command "eco give 1000 %player%"' etc.
# It recommends in warning to replace these with their native Skript version, e.g: "add 1000 to player's balance"
# It is generally faster and better because it is in native Skript, however you can disable these warnings if you want.

disable deprecation warnings: false
# Disables the deprecation warnings for some buggy conditions, expressions, patterns etc.
# Generally you should not make this true, since they are buggy or laggy anyway. But you can do, if you want.
# This totally what configuration is made for. You can customize everything!


warn when using none values in strings: false
# If this option is true, skript sends a warning message to console
# That indicating a variable is none, or an expression is returned none when converting to string.
# It usually happens by a bug. You should set a default value in such situation.

warn when using explicit player pattern: false
# When you use explicit "to player" in "send" effect and the sender is console,
# the effect will not do anything because there is no player when sender is the console.
# Skript tries to catch these and gives a warning for explicit use of player if this option is true.


enable timings: true
# When true, triggers in scripts will be present in timings reports.
# Note that this requires PaperSpigot, TacoSpigot or LifeSpigot to work; on Bukkit/Spigot this option does nothing.
# When false, timings are not enabled for scripts even if you're running PaperSpigot, TacoSpigot or LifeSpigot.
# This does not have any impact on performance unless timings is enabled, we don't recommend changing this option.

enable spike detector: default
# When true, Skript will dedect server spikes/freezes and print useful warnings
# for finding the cause of it. If on default and enable timings is true, it will warn only when timings is enabled.
# It's recommended to make this true even in production because hunting spikes and lag is always good.


default source version: default
# Controls default source version of the scripts that does not contain source configuration setting.
# The default value is fine in most situtations, but if you want perfection set this to latest (or current).
# When set to default, scripts will have default source version of the current Skript version with last digit removed
# For example if you're running Skript 2.2.14, the source version will be 2.2.1, and if you're running Skript 2.2.20, source version will be 2.2.2.


disable backups completely: false
# This option disables the backup system completely, e.g: when your configuration is updated to latest version,
# it no longer create a backup of your old configuration, e.g the backups folder will NOT be created at all.
# This also disables backups of variables, etc. so don't make this true unless you know what you're doing.

# ==== Variables ====

databases:
	# Databases to store variables in. These can either be used as a simple one-server-storage
	# where variables are written constantly but only read at server start,
	# or as a connection between multiple servers by monitoring the database(s) for changes.
	#
	# You can define as many databases as you want, just make sure to choose a distinct name for each one, and don't forget to set all options correctly.
	#
	# To be able to use a database you'll need to download the plugin 'SQLibrary' from http://dev.bukkit.org/projects/sqlibrary/files
	# and install it in your server's plugin directory like other plugins.
	#
	# Please note that '/skript reload' will not reload this section, i.e. you'll have to restart Skript for changes to take effect.

	# Each database definition must be in a separate section. You can choose any name for the sections, as long as it's not already used.
	database 1:
		# an example database to describe all possible options.
		
		type: disabled # change to line below to enable this database
		# The type of this database. Allowed values are 'CSV', 'SQLite', 'MySQL' and 'disabled'.
		# CSV uses a text file to store the variables, while SQLite and MySQL use databases, and 'disabled' makes Skript ignore the database as if it wasn't defined at all.

		pattern: .*
		# Defines which variables to save in this database.
		# This pattern uses Regex syntax, e.g. use 'db_.*' (without the quotes) to store all variables prefixed with 'db_' in this database,
		# or use '.*' (the default value) to store all variables here (recommended for the last database in this list, as otherwise some variables might not be saved).
		# Please note that variables are only stored in one database, and databases are checked from top to bottom,
		# e.g. if a variable matches the topmost database's pattern it will be saved there and nowhere else.
		# BTW: Patterns are checked in a separate thread, i.e. your server likely won't run slower when using complicated patterns.

		monitor changes: false
		monitor interval: 20 seconds
		# If 'monitor changes' is set to true, variables will repeatedly be checked for updates in the database (in intervals set in 'monitor interval').
		# ! Please note that you should set 'pattern', 'monitor changes' and 'monitor interval' to the same values on all servers that access the same database!

		# == MySQL configuration ==
		host: localhost # Where the database server is located at, e.g. 'example.com', 'localhost', or '192.168.1.100'
		port: 3306 # 3306 is MySQL's default port, i.e. you likely won't need to change this value
		user: root
		password: pass
		database: skript # The database to use. Skript will automatically create a table 'variables21' in this database if it doesn't exist
		                 # (If the table exists but is defined differently that how Skript expects it to be you'll get errors and no variables will be saved and/or loaded)

		# == SQLite/CSV configuration ==
		file: ./plugins/Skript/variables.db
		# Where to save the variables to. For a CSV file, the file extension '.csv' is recommended, but not required, but SQLite database files must end in '.db' (SQLibrary forces this).
		# The file path can either be absolute (e.g. 'C:\whatever\...' [Windows] or '/usr/whatever/...' [Unix]), or relative to the server directory (e.g. './plugins/Skript/...').

		backup interval: 2 hours
		# Creates a backup of the file every so often. This can be useful if you ever want to revert variables to an older state.
		# Variables are saved constantly no matter what is set here, thus a server crash will never make you loose any variables.
		# Set this to 0 to disable this feature.


	MySQL example:
		# A MySQL database example, with options unrelated to MySQL removed.

		type: disabled # change to line below to enable this database
		# type: MySQL

		pattern: synced_.* # this pattern will save all variables that start with 'synced_' in this MySQL database.

		host: localhost
		port: 3306
		user: root
		password: pass
		database: skript

		monitor changes: true
		monitor interval: 20 seconds

	SQLite example:
		# A SQLite database example.

		type: disabled # change to line below to enable this database
		# type: SQLite

		pattern: db_.* # this pattern will save all variables that start with 'db_' in this SQLite database.

		file: ./plugins/Skript/variables.db
		# SQLite databases must end in '.db'

		backup interval: 4 hours

		monitor changes: false
		monitor interval: 20 seconds

	default:
		# The default "database" is a simple text file, with each variable on a separate line and the variable's name, type, and value separated by commas.
		# This is the last database in this list to catch all variables that have not been saved anywhere else.
		# You can modify this database freely, but make sure to know what you're doing if you don't want to loose any variables.

		type: CSV

		pattern: .*

		file: ./plugins/Skript/variables.csv

		backup interval: 2 hours

	# PS: If you don't want some variables to be saved in any database (e.g. variables that contain an %entity% which usually despawn when the server is shut down)
	# you can modify the last database's pattern to not match all variables, e.g. use '(?!x_).*' to match all variables that don't start with 'x_'.
	# Be very cautious when doing this however as unsaved variables cannot be recovered after the server has been stopped.
	# I recommend to use a single character to denote unsaved variables (similar to local variables' '_'), e.g. '-', in which case the last database's pattern should be '(?!-).*'.



# ==== Settings that should not be changed ====

version: ${project.version}
# DO NOT CHANGE THIS VALUE MANUALLY!
# This saves for which version of Skript this configuration was written for.
# If it does not match the version of the .jar file then the config will be updated automatically.
# You don't need to reset your config when upgrading Skript version.
